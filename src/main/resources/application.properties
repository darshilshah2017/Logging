server.port=8082

#logging.pattern.file=[%d{yyyy-MM-dd'T'HH:mm:ss.sss'Z'}] [%C] [%t] [%L] [%-5p] %m%n

#logging.level.com.example.logging=DEBUG

#Logging file name
logging.file.name=myLog.log

#Number of days to keep
logging.file.max-history=5

#Max size of log file. If size gets greater than 10KB, then archive it.
logging.file.max-size=10KB

#total size of all the archive files. If total size > 20KB, then it will delete the old archived files
logging.file.total-size-cap=20KB

#Archive the existing content of log file and start with fresh(0KB) log file
logging.file.clean-history-on-start=true

logging.level.root=info
logging.level.com.example.logging.service=DEBUG
# When logging level is set to ERROR, then the following level messages gets logged: ERROR
# When logging level is set to WARN, then the following level messages gets logged: WARN, ERROR.  The WARN level is the level that should be active in production systems by default, so that only WARN and ERROR messages are being reported, thus saving storage capacity and performance
# When logging level is set to INFO, then the following level messages gets logged: INFO, ERROR
# When logging level is set to DEBUG, then the following level messages gets logged: DEBUG, INFO, ERROR
# When logging level is set to TRACE, then the following level messages gets logged: TRACE, DEBUG, INFO, ERROR. This is really fine-grained information—finer even than DEBUG. When you're at this level, you're basically looking to capture every detail you possibly can about the application's behavior. This is likely to consume a lot of your resources in production